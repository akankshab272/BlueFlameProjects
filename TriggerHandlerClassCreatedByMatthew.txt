public with sharing class LeadTriggerHandler {

    public void afterInsert(List<Lead> leadLst) {   
        mergeLeads(leadLst);
    }

    public void afterUpdate(List<Lead> leadLst) {   
        mergeLeads(leadLst);
    }
    
    
    public void mergeLeads(List<Lead> leadLst) {
    
        Map<String,Lead> leadEmailMap = new Map<String,Lead>();
        
        for (Lead l : leadLst) {
            if (l.email != null) {
                leadEmailMap.put(l.email.toUpperCase(),l);
            }
        }
        
// Duplicate Lead Merge Field Log is the set of field where any potentially lost information will be stored
        Schema.FieldSet fs = Schema.SObjectType.Lead.fieldSets.Duplicate_Lead_Merge_Field_Log;

        List<Lead> masterLst = new List<Lead>([SELECT Id, Email,Company, crms33__Merged_Field_Data__c FROM Lead WHERE Email in: leadEmailMap.keySet() ORDER BY CreatedDate ASC]);
        
// Logic required here to..
//  Identify the fields in the Duplicate_Lead_Merge_Field_Log FieldSet
//  Ignore the Email field and crms33__Merged_Field_Data__c fields if these are present
//  Determine that each of these fields are accessible by the user (isAccessible)
//  For each accessible field in the fieldset, identify whether the field value on the duplicate record matches the master record
//  If the field value in the duplicate record matches the master record, do nothing
//  If the field value in the duplicate record already exists, together with the field name on a single line in the master record, do nothing. 
//  If the field value in the duplicate record is different to the master record, update the crms33__Merged_Field_Data__c field on the master
//    <date format 2017-03-03> <time format 12:34:00>: <duplicate_field_name>: <duplicate_field_value> 
//
//  The purpose of the logic above is to record changes that may appear in the duplicate record (e.g. a scenario where the telephone number is
//  different, or the company name has changed)

        
        for (Lead l : masterLst) {
            if ((l.Company == '[not provided]') && (leadEmailMap.get(l.email.toUpperCase()).Company != null)) {
                l.Company = leadEmailMap.get(l.email.toUpperCase()).Company;
            }
            for(Schema.FieldSetMember f : fs.getFields()) {
//               l.Merged_Field_Data__c += f.getLabel() + ': ' + leadEmailMap.get(l.email.toUpperCase()).(f.getFieldPath());
            }

        }
        update masterLst;
        
// If there are already multiple leads with the same email address, then merge these first.
// Treat the first created lead as the master.        
        if (masterLst.size() > 1) {
            integer COUNT = 0;
            for (Lead l: masterLst) {
              if (COUNT > 0) {
                  System.debug('Processing existing records');
                  Database.MergeResult result = Database.merge(masterLst[0],l);  
                  if (result.isSuccess()) {
                      System.debug('Master record ID: ' + result.getId());
                      System.assertEquals(masterLst[0].id, result.getId()); 
                  } else {
                      for(Database.Error err : result.getErrors()) {
                          System.debug(err.getMessage());
                      }                        
                  }
              }
              COUNT++;
            }
        }

        for (Lead l : masterLst) {
            Database.MergeResult result = Database.merge(l, leadEmailMap.get(l.email.toUpperCase()));          
                    
            if (result.isSuccess()) {
// Get the master ID from the result and validate it
                System.debug('Master record ID: ' + result.getId());
                System.assertEquals(l.Id, result.getId());              
        
// Get the IDs of the merged records and display them
                List<Id> mergedIds = result.getMergedRecordIds();
                System.debug('ID of merged records: ' + mergedIds);                
            } else {
                for(Database.Error err : result.getErrors()) {
// Write each error to the debug output
                    System.debug(err.getMessage());
                }
            }
        }

    }
}